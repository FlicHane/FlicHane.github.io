<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何使用Hexo和GitHub部署静态网站</title>
    <url>/2024/11/10/How-to-deploy-a-static-website-with-Hexo-and-GitHub/</url>
    <content><![CDATA[<p>我使用的模板是hexo上的keep</p>
<h3 id="1-安装-Node-js-和-Hexo"><a href="#1-安装-Node-js-和-Hexo" class="headerlink" title="1. 安装 Node.js 和 Hexo"></a>1. 安装 Node.js 和 Hexo</h3><ul>
<li><p><strong>安装 Node.js</strong>：去 <a class="link"   href="https://nodejs.org/" >Node.js官网<i class="fas fa-external-link-alt"></i></a> 下载并安装 Node.js（装完会自动带上 npm）。</p>
</li>
<li><p><strong>安装 Hexo</strong>：打开终端（先win+R，输入cmd后回车），运行以下命令来全局安装 Hexo。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-初始化-Hexo-项目"><a href="#2-初始化-Hexo-项目" class="headerlink" title="2. 初始化 Hexo 项目"></a>2. 初始化 Hexo 项目</h3><ul>
<li><p>选择一个文件夹，作为你的网站项目目录。</p>
</li>
<li><p>进入这个文件夹，用 Hexo 初始化项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init 你的项目名称</span><br><span class="line"><span class="built_in">cd</span> 你的项目名称</span><br><span class="line">npm install  <span class="comment"># 安装项目依赖</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>如果hexo init blog 卡住</strong></p>
<p>​    此小节引用于：<a class="link"   href="https://blog.csdn.net/f6619082/article/details/109193251" >https://blog.csdn.net/f6619082/article/details/109193251<i class="fas fa-external-link-alt"></i></a></p>
<p>​    替换成以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/weilining/hexo-starter.git blog</span><br><span class="line">   <span class="built_in">cd</span> blog</span><br><span class="line">   git submodule init</span><br><span class="line">   git submodule update</span><br><span class="line">   npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org</span><br><span class="line">   npm i	</span><br></pre></td></tr></table></figure>



<h3 id="3-创建内容"><a href="#3-创建内容" class="headerlink" title="3. 创建内容"></a>3. 创建内容</h3><ul>
<li>选择网站模板<br>可以到hexo官网找模板，点击模板链接到GitHub，里面会有网站模板应该如何部署的介绍<br>部署好模板之后就可以跟着介绍自定义自己的网站</li>
</ul>
<h3 id="4-配置-GitHub-Pages-部署"><a href="#4-配置-GitHub-Pages-部署" class="headerlink" title="4. 配置 GitHub Pages 部署"></a>4. 配置 GitHub Pages 部署</h3><ul>
<li><p><strong>安装 GitHub 部署插件</strong>：<br>这个插件可以把生成的public文件上传到GitHub<br> public文件由hexo deploy命令生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置 <code>_config.yml</code> 文件</strong>：<br>打开项目根目录下的 <code>_config.yml</code>，在底部找到 <code>deploy</code> 配置，填入 GitHub 仓库信息：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/你的GitHub用户名/你的仓库名.git</span><br><span class="line">  branch: master  <span class="comment"># 如果用的主分支是 master，就写 master，不是的话改成对应分支</span></span><br></pre></td></tr></table></figure>

<h3 id="5-本地预览"><a href="#5-本地预览" class="headerlink" title="5. 本地预览"></a>5. 本地预览</h3><ul>
<li><p>在本地生成静态文件并预览效果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>打开浏览器访问 <code>http://localhost:4000</code>，看看网站效果。</p>
</li>
</ul>
<h3 id="6-部署到-GitHub-Pages"><a href="#6-部署到-GitHub-Pages" class="headerlink" title="6. 部署到 GitHub Pages"></a>6. 部署到 GitHub Pages</h3><ul>
<li><p>生成并部署到 GitHub Pages：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean     <span class="comment"># 清理旧文件，确保是最新内容</span></span><br><span class="line">hexo generate  <span class="comment"># 生成静态文件</span></span><br><span class="line">hexo deploy    <span class="comment"># 部署到 GitHub</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果没有报错，访问 <code>https://你的GitHub用户名.github.io</code> 就可以看到你的 Hexo 网站上线了。</p>
</li>
</ul>
<h3 id="7-更新和再次部署"><a href="#7-更新和再次部署" class="headerlink" title="7. 更新和再次部署"></a>7. 更新和再次部署</h3><p>每次修改内容或发布新文章时，重复以下步骤：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>就这些，全流程下来网站就部署在 GitHub Pages 上了。</p>
<p>hexo generate指令等价于hexo g</p>
<p>hexo server指令等价于hexo s</p>
]]></content>
      <tags>
        <tag>buildWebsite</tag>
      </tags>
  </entry>
  <entry>
    <title>Bean Configuration注解详解</title>
    <url>/2024/11/12/@Bean%20@Configuration%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>这个配置类里的<code>@Bean</code>注解方法会在</strong>Spring容器初始化时<strong>自动执行</strong>。</p>
<p>具体来说：</p>
<ol>
<li><p>**<code>@Configuration</code>**：表示这是一个配置类，Spring会在启动时读取这个类并处理其中的<code>@Bean</code>注解的方法。</p>
</li>
<li><p>**<code>@Bean</code>**：告诉Spring这个方法的返回值是一个Spring管理的bean，会被注册到Spring的IOC容器中。</p>
</li>
</ol>
<p>因此，在应用启动的时候，Spring会扫描到（用的是”具体细节“内用到的例子）<code>RedisConfiguration</code>类并调用<code>redisTemplate()</code>方法，创建<code>RedisTemplate</code>对象，并将其注册到Spring容器中，供其他地方使用。</p>
<p>所以，这个方法会在程序启动时自动执行，<strong>不用手动调用</strong>。</p>
<h1 id="更多细节"><a href="#更多细节" class="headerlink" title="更多细节"></a><span style="background:#ff4d4f">更多细节</span></h1><p>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;开始创建redis模板&quot;</span>);  </span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();  </span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());  </span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);  </span><br><span class="line">        <span class="keyword">return</span> redisTemplate;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-Spring容器的工作原理"><a href="#1-Spring容器的工作原理" class="headerlink" title="1. Spring容器的工作原理"></a>1. <strong>Spring容器的工作原理</strong></h3><p>Spring的<strong>IOC容器</strong>，即控制反转容器，负责管理对象的创建、生命周期、依赖注入等，确保对象之间的关系和依赖性都被正确处理。在Spring中，容器的核心是<code>ApplicationContext</code>，它是<strong>BeanFactory</strong>的超集。</p>
<h3 id="2-Bean方法的执行流程"><a href="#2-Bean方法的执行流程" class="headerlink" title="2. @Bean方法的执行流程"></a>2. <strong><code>@Bean</code>方法的执行流程</strong></h3><p>当你在配置类中定义了<code>@Bean</code>注解的方法，Spring容器会在<strong>应用启动时</strong>扫描到这个方法，并通过反射调用它。调用这个方法时，Spring并不会立即执行方法体里的内容，而是会执行以下步骤：</p>
<ul>
<li><p><strong>创建Bean实例</strong>：Spring调用<code>redisTemplate()</code>方法，并获取它返回的<code>RedisTemplate</code>对象。<strong>这时，<code>RedisTemplate</code>对象被创建出来</strong>。</p>
</li>
<li><p><strong>管理Bean的生命周期</strong>：Spring会将这个<code>RedisTemplate</code>实例放入IOC容器中，成为一个可管理的<strong>Bean</strong>。容器会管理这个对象的生命周期，比如初始化、依赖注入、销毁等。</p>
</li>
</ul>
<h3 id="3-Bean的依赖注入"><a href="#3-Bean的依赖注入" class="headerlink" title="3. Bean的依赖注入"></a>3. <strong>Bean的依赖注入</strong></h3><ul>
<li><p><strong>自动注入</strong>：在<code>redisTemplate()</code>方法里，<code>RedisConnectionFactory</code>是作为方法参数传入的。Spring会在容器中查找<strong>合适的<code>RedisConnectionFactory</code> Bean</strong>，并自动注入到<code>redisTemplate()</code>方法中。</p>
</li>
<li><p><strong>传递依赖</strong>：Spring会首先实例化<code>RedisConnectionFactory</code>，然后把它作为依赖传递给<code>redisTemplate()</code>，从而完成整个Bean的创建过程。</p>
</li>
</ul>
<h3 id="4-实例化和注册到容器"><a href="#4-实例化和注册到容器" class="headerlink" title="4. 实例化和注册到容器"></a>4. <strong>实例化和注册到容器</strong></h3><ul>
<li>当<code>redisTemplate()</code>方法被调用时，<code>RedisTemplate</code>对象已经创建并返回给Spring。</li>
<li><strong>Spring将<code>RedisTemplate</code>实例注册到容器</strong>，这个Bean的名字就是方法名——<code>redisTemplate</code>，你可以在其他地方通过<code>@Autowired</code>或者<code>@Qualifier</code>来注入它。</li>
</ul>
<h3 id="5-执行时机"><a href="#5-执行时机" class="headerlink" title="5. 执行时机"></a>5. <strong>执行时机</strong></h3><ul>
<li><p><strong>容器启动时</strong>，Spring会扫描到标有<code>@Configuration</code>和<code>@Bean</code>的类。此时，Spring容器会调用所有<code>@Bean</code>注解的方法，创建这些Bean并注册到容器中。你不需要手动调用<code>redisTemplate()</code>，Spring自动帮你处理。</p>
</li>
<li><p><strong><code>@Bean</code>方法调用顺序</strong>：如果有多个<code>@Bean</code>注解方法，Spring会按照方法定义的顺序来调用它们，保证依赖关系正确。</p>
</li>
</ul>
<h3 id="6-为什么要使用-Bean和-Configuration？"><a href="#6-为什么要使用-Bean和-Configuration？" class="headerlink" title="6. 为什么要使用@Bean和@Configuration？"></a>6. <strong>为什么要使用<code>@Bean</code>和<code>@Configuration</code>？</strong></h3><ul>
<li><p><strong>解耦和集中管理配置</strong>：使用<code>@Configuration</code>注解的类可以集中管理你的配置，避免把配置散布到代码的各个地方。这样也更容易进行单元测试和修改配置。</p>
</li>
<li><p><strong>灵活控制Bean的创建</strong>：使用<code>@Bean</code>方法，你可以对Bean的创建过程进行精确控制。比如你可以在<code>@Bean</code>方法里添加日志、配置条件等，而这些<code>@Bean</code>方法会在容器初始化时执行。</p>
</li>
</ul>
<h3 id="7-容器启动的步骤概览"><a href="#7-容器启动的步骤概览" class="headerlink" title="7. 容器启动的步骤概览"></a>7. <strong>容器启动的步骤概览</strong></h3><ol>
<li><strong>扫描配置类</strong>：Spring扫描所有带有<code>@Configuration</code>注解的类，找到其中的<code>@Bean</code>方法。</li>
<li><strong>调用<code>@Bean</code>方法</strong>：Spring通过<font color="#d83931">反射</font>调用<code>@Bean</code>标记的方法，创建这些Bean。</li>
<li><strong>依赖注入</strong>：Spring会解析<code>@Autowired</code>、<code>@Qualifier</code>等注解，自动注入Bean的依赖。</li>
<li><strong>注册到容器</strong>：创建好的Bean被注册到容器中，可以通过<code>@Autowired</code>或者其他方式进行注入使用。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>容器在应用启动时会自动识别和调用带有<code>@Bean</code>注解的方法，创建相应的对象，并管理它们的生命周期和依赖注入。你通过<code>@Bean</code>定义的<code>RedisTemplate</code>，Spring会帮你自动创建并注入所需的依赖项（比如<code>RedisConnectionFactory</code>），然后将其注册到IOC容器中供其他组件使用。这种方式使得配置类能更灵活地控制Bean的创建过程，同时保持代码的简洁和模块化。</p>
]]></content>
      <tags>
        <tag>java注解</tag>
      </tags>
  </entry>
  <entry>
    <title>创建静态网站时可能会遇到的问题</title>
    <url>/2024/11/11/Many-question-in-developing-static-website/</url>
    <content><![CDATA[<h1 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [post] shit</span><br></pre></td></tr></table></figure>

<p><span style="background:#ff4d4f">注意</span>：如果<em>文件名</em>为中文时，hexo g 指令无法正常生成网页文件，可以试试把电脑系统的编码模式设置为UTF-8</p>
<h1 id="title中不允许存在-字符"><a href="#title中不允许存在-字符" class="headerlink" title="title中不允许存在@字符"></a>title中不允许存在@字符</h1><p><img   src="https://flichane.github.io/picx-images-hosting/%E5%9B%BE%E7%89%87.6wqqytzg3d.webp"  alt="none"></p>
]]></content>
      <tags>
        <tag>question</tag>
      </tags>
  </entry>
  <entry>
    <title>中文文件名测试</title>
    <url>/2024/11/11/%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6%E5%90%8D%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p>哈哈哈成功了，留个纪念</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>图片上传测试</title>
    <url>/2024/11/12/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<img     src="https://github.com/FlicHane/picx-images-hosting/raw/master/头像.7p3mgj28tl.webp"   alt="头像"  >
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>Test</tag>
      </tags>
  </entry>
</search>
